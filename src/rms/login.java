package rms;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class login extends javax.swing.JFrame implements ActionListener {

JPanel  mainpanel,panelnorth,panelcenter;
JLabel username,password,title;
JTextField usernametf;
JPasswordField passwordpf;
JButton admin,employee;
ResultSet rs=null;
java.sql.Connection conn=null;
String url="jdbc:mysql://localhost:3306/restuarant";
   String dbun="root";
   String pwd="";
   PreparedStatement pstm=null;
public login() {

mainpanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 1));
panelnorth = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 1));
title = new JLabel("LOGIN PAGE");
title.setFont(new Font("Times New Roman", Font.BOLD, 35));
panelnorth.add(title);
panelnorth.setBackground(Color.orange);
panelnorth.setPreferredSize(new Dimension(700, 90));
mainpanel.add(panelnorth, BorderLayout.NORTH);
panelcenter = new JPanel(new FlowLayout(FlowLayout.CENTER));
//panelcenter.setBackground(Color.black);
panelcenter.setPreferredSize(new Dimension(700, 410));

username=new JLabel ("Username");
username.setFont(new Font("Times New Roman", Font.BOLD, 14));
username.setBounds(10, 30, 100, 25);
usernametf = new JTextField(10);
usernametf.setFont(new Font("Times New Roman", Font.BOLD, 14));
usernametf.setBounds(20, 30, 100, 25);


password=new JLabel ("Password");
password.setFont(new Font("Times New Roman", Font.BOLD, 14));
password.setBounds(10, 40, 100, 25);
passwordpf=new JPasswordField(10);
passwordpf.setFont(new Font("Times New Roman", Font.BOLD, 14));
passwordpf.setBounds(10, 40, 100, 25);


admin= new JButton("ADMIN");
admin.setFont(new Font("Times New Roman", Font.BOLD, 14));
admin.setBounds(10, 60, 100, 25);
admin.setPreferredSize(new Dimension(80, 40));

employee= new JButton("EMLOYEE");
employee.setFont(new Font("Times New Roman", Font.BOLD, 14));
employee.setBounds(10, 80, 100, 40);
employee.setPreferredSize(new Dimension(100, 40));

mainpanel.add(panelcenter, BorderLayout.CENTER);

admin.addActionListener(this);
employee.addActionListener(this);

panelcenter.add(username);// BorderLayout.WEST);
panelcenter.add(usernametf);//, BorderLayout.WEST);
panelcenter.add(password);//, BorderLayout.WEST);
panelcenter.add(passwordpf);//, BorderLayout.WEST);
panelcenter.add(admin);// BorderLayout.SOUTH);
panelcenter.add(employee);// BorderLayout.SOUTH);

add(mainpanel, BorderLayout.CENTER);
setSize(700,500);
setTitle("login"); 
setVisible(true);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);
            }
        });
    }
    @Override
    public void actionPerformed(ActionEvent e) {
     if(e.getSource()==admin){
     //validate login credentials
        String username = usernametf.getText();
        String password = String.valueOf(passwordpf.getPassword());
        if(username.equals("admin") && password.equals("admin123")) {
            //if credentials are correct, display main paneladmin123
          new Restaurant().setVisible(true);
          setVisible(false);            
        }
        else if(usernametf.getText().isEmpty()||passwordpf.getText().isEmpty())
{
    JOptionPane.showMessageDialog(this,"Missing Cridentials");
}
        else {
            //if credentials are incorrect, display error message
            JOptionPane.showMessageDialog(this, "Invalid username or password.");
        }
    }
   if(e.getSource()==employee){
   String username = usernametf.getText();
   String password = new String(passwordpf.getPassword());
        // Validate the employee credentials against the employee table in the database
        boolean isValidEmployeeLogin = validateEmployeeLogin(username, password);
        
        if (isValidEmployeeLogin) {
            // Perform actions for employee login, such as opening the employee dashboard
        new Restaurant().setVisible(true);
        setVisible(false); 
        }
        else if(usernametf.getText().isEmpty()||passwordpf.getText().isEmpty())
{
    JOptionPane.showMessageDialog(this,"Missing Cridentials");
}
 else {
            //if credentials are incorrect, display error message
            JOptionPane.showMessageDialog(this, "Invalid username or password.");
        }       
   }   
}
    
private boolean validateEmployeeLogin(String username, String password) {
    // Implement the logic to validate the employee credentials against the employee table in the database
    // Use JDBC to connect to the database, retrieve the employee username and password, and compare with the entered values
    
    // Example code snippet:
    String query = "SELECT * FROM employee WHERE empusername = ? AND emppassword = ?";
    
    try {
        conn =DriverManager.getConnection(url, dbun, pwd);
        pstm = conn.prepareStatement(query);
        pstm.setString(1, username);
        pstm.setString(2, password);
        rs = pstm.executeQuery();
        return rs.next(); // If a row is returned, the login is valid 
    } catch (SQLException ex) {
        ex.printStackTrace();
        return false;
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
